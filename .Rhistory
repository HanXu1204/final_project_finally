expr <-
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", add = T, xlim = range(x1), ylim=range(x2),col = "violet")
expr <-
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "violet")
expr <-
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange")
expr <-
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68, y=75, type="p", col="purple")
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple")
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=5)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=6)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=6, pec=19)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=6, pch=19)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=6, pch=46)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=6, pch=4)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="green", lwd=6, pch=4)
plot(x=x1, y=x2, col = ifelse(y ==1, "red", "blue"), xlab = "Rescaled Exam1", ylab = "Rescaled Exam2")
curve(expr = -current_theta0/current_theta2 + (-current_theta1*x/current_theta2), type = "l", lty = "dashed", add = T, xlim = range(x1), ylim=range(x2),col = "orange", lwd=3)
points(x=68/max(admission$exam1), y=75/max(admission$exam2), type="p", col="purple", lwd=6, pch=4)
sigvalue <- -59.45505 + 45.73143*68/max(admission$exam1) + 45.51044*75/max(admission$exam2)
sigvalue <- -59.45505 + 45.73143*68/max(admission$exam1) + 45.51044*75/max(admission$exam2)
sigvalue
sigvalue <- -59.45505 + 45.73143*(68/max(admission$exam1)) + 45.51044*(75/max(admission$exam2))
sigvalue <- -59.45505 + 45.73143*(68/max(admission$exam1)) + 45.51044*(75/max(admission$exam2))
sigvalue
68/max(admission$exam1)
75/max(admission$exam2
)
sigvalue <- inv.logit(-59.45505 + 45.73143*(68/max(admission$exam1)) + 45.51044*(75/max(admission$exam2)))
sigvalue
exp⁡(0.00304*1+0.00057*1*30)
exp(0.00304*1+0.00057*1*30)
exp(0.00304*1+0.00057*1*90)
exp(0.00304*1+0.00057*1*365)
exp(0.00304*1+0.00057*1*730)
exp(0.00304*1+0.00057*1*1461)
iris_flowers <- read.csv("~/Documents/Fall 2022/INFO 534/Dataset/iris_flowers.csv")
View(iris_flowers)
knitr::opts_chunk$set(echo = TRUE)
class <- read.csv("~/Documents/Fall 2022/INFO 534/Dataset/iris_flowers.csv", stringsAsFactors = FALSE)
names(class)
view(class)
View(data)
View(class)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(gtsummary)
library(gee)
library(geepack)
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "unstructured", data = abeta_fmt, family = "Gamma")
# load datasets
setwd("~/Documents/Capstone Second Year/")
ab1_42_tTau <- read.csv("data/Akesogen CSF Sample Run AB1-42_tTau-cm.csv", stringsAsFactors = FALSE, header = TRUE)
sequence <- read.csv("data/treatment_arm.csv",stringsAsFactors = FALSE, header = TRUE)
# Amyloid_beta42
ab1_42 <- ab1_42_tTau %>%
mutate(id = as.numeric(paste0(substr(ATX.ID,7,7),substr(ATX.ID,9,11)))) %>%
left_join(sequence, by = c("id"="SCRNO"),all = TRUE) %>%
add_row(id = 1031, visit = "V26", arm = "Active/Placebo") %>%
mutate(sequence = ifelse(substr(arm,1,6)=="Active",1,0),
period = ifelse(visit == "Screen B", 0, ifelse(visit == "V14", 1,2))) %>%
dplyr::select(id, visit, period, arm, sequence, AB1.42)
ab1_42$AB1.42 <-  as.numeric(ab1_42$AB1.42)
ab1_42 <- ab1_42[order(ab1_42$id, ab1_42$visit),]
# create variables we need
abeta <- ab1_42 %>%
group_by(id) %>%
mutate(Abeta0 = AB1.42[1],
Abeta_fold = ifelse(period == 1, (AB1.42[2]/AB1.42[1]),
ifelse(period == 2, (AB1.42[3]/AB1.42[2]),NA)),
post_baseline = ifelse(period == 1, paste0(AB1.42[2],"/",AB1.42[1]),
ifelse(period == 2, paste0(AB1.42[3], "/", AB1.42[2]),NA)),
active_tx = ifelse(sequence == 0 & period == 1, 0,
ifelse(sequence == 0 & period == 2, 1,
ifelse(sequence == 1 & period == 1, 1,
ifelse(sequence == 1 & period == 2, 0, NA))))) %>%
select(id, period, sequence, Abeta0, Abeta_fold, post_baseline, active_tx) %>%
slice(-1)
abeta_fmt <- abeta %>% mutate(period = factor(period, levels = c(1,2), labels = c("1st", "2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c("Placebo first", "Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c("Placebo", "Active")))
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "unstructured", data = abeta_fmt, family = "Gamma")
summary(try1)
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "stat_M_dep", data = abeta_fmt, family = "Gamma")
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "exchangeable", data = abeta_fmt, family = "Gamma")
summary(try1)
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "independence", data = abeta_fmt, family = "Gamma")
summary(try1)
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "unstructured", data = abeta_fmt, family = "Gamma")
summary(try1)
# model regression: gee function with gamma family
try1 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "unstructured", data = abeta_fmt, family = "Gamma")
summary(try1)
try2 <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "independence", data = abeta_fmt, family = "Gamma")
summary(try2)
# load datasets
setwd("~/Documents/Capstone Second Year/")
ab1_42_tTau <- read.csv("data/Akesogen CSF Sample Run AB1-42_tTau-cm.csv", stringsAsFactors = FALSE, header = TRUE)
sequence <- read.csv("data/treatment_arm.csv",stringsAsFactors = FALSE, header = TRUE)
# Amyloid_beta42
ab1_42 <- ab1_42_tTau %>%
mutate(id = as.numeric(paste0(substr(ATX.ID,7,7),substr(ATX.ID,9,11)))) %>%
left_join(sequence, by = c("id"="SCRNO"),all = TRUE) %>%
add_row(id = 1031, visit = "V26", arm = "Active/Placebo") %>%
mutate(sequence = ifelse(substr(arm,1,6)=="Active",1,0),
period = ifelse(visit == "Screen B", 0, ifelse(visit == "V14", 1,2))) %>%
dplyr::select(id, visit, period, arm, sequence, AB1.42)
ab1_42$AB1.42 <-  as.numeric(ab1_42$AB1.42)
ab1_42 <- ab1_42[order(ab1_42$id, ab1_42$visit),]
# create variables we need
abeta <- ab1_42 %>%
group_by(id) %>%
mutate(Abeta0 = AB1.42[1],
Abeta_fold = ifelse(period == 1, (AB1.42[2]/AB1.42[1]),
ifelse(period == 2, (AB1.42[3]/AB1.42[2]),NA)),
post_baseline = ifelse(period == 1, paste0(AB1.42[2],"/",AB1.42[1]),
ifelse(period == 2, paste0(AB1.42[3], "/", AB1.42[2]),NA)),
active_tx = ifelse(sequence == 0 & period == 1, 0,
ifelse(sequence == 0 & period == 2, 1,
ifelse(sequence == 1 & period == 1, 1,
ifelse(sequence == 1 & period == 2, 0, NA))))) %>%
select(id, period, sequence, Abeta0, Abeta_fold, post_baseline, active_tx) %>%
slice(-1)
abeta_fmt <- abeta %>% mutate(period = factor(period, levels = c(1,2), labels = c("1st", "2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c("Placebo first", "Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c("Placebo", "Active")))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(gee)
library(geepack)
library(tibble)
# 1) Working correlation: Unstructured
fit_abeta_uns <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "unstructured", data = abeta_fmt, family = "Gamma")
summary(fit_abeta_uns)
names(summary(fit_abeta_uns))
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(pval = 2*1-pnorm(abs(coefficients[5]))) %>%
knitr::kable()
summary(fit_abeta_uns)$coefficients[5]
summary(fit_abeta_uns)$coefficients[,5]
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(pval = 2*1-pnorm(abs(coefficients[,5]))) %>%
knitr::kable()
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(pval = 2*1-pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]))) %>%
knitr::kable()
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(pval = 2*1-pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]))) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*1-pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]))) %>%
knitr::kable()
table_1
abeta_fmt <- abeta %>% mutate(period = factor(period, levels = c(1,2), labels = c(":1st", ":2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c(":Placebo first", ":Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c(":Placebo", ":Active")))
# model regression: gee function with gamma family
# 1) Working correlation: Unstructured
fit_abeta_uns <- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "unstructured", data = abeta_fmt, family = "Gamma")
# 2) Working correlation: Independence
fit_abeta_ind<- gee(Abeta_fold ~ period + sequence + active_tx + Abeta0, id = id, corstr = "independence", data = abeta_fmt, family = "Gamma")
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*1-pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]))) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]))) %>%
knitr::kable()
table_1
pnorm(14.0986923)
pnorm(14.0986923,0,1,lower.tail = T)
pnorm(14.0986923,0,1,lower.tail = F)
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5], lower.tail = F))) %>%
knitr::kable()
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4)))
knitr::kable()
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4)) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(coef(summary(fit_abeta_uns))) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(round(coef(summary(fit_abeta_uns)),4)) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(round(coef(summary(fit_abeta_uns)),5)) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable()
table_1
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(round(coef(summary(fit_abeta_uns)),5)) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable()
table_1
# export results
## model 2 with unstructured correlation
table_2 <- data.frame(round(coef(summary(fit_abeta_ind)),5)) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_ind)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable()
table_2
# export results
## model 1 with unstructured correlation
table_1 <- data.frame(round(coef(summary(fit_abeta_uns)),5)) %>%
rownames_to_column('Parameter') %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_uns)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable(align = "c")
table_1
View(abeta)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(gee)
library(geepack)
library(tibble)
a2 <- abeta_fmt[,c(-17,-18)]
a2 <- abeta_fmt[c(-17,-18),]
View(a2)
# export results
## model 2 with independence correlation
table_2 <- data.frame(round(coef(summary(fit_abeta_ind)),5)) %>%
rownames_to_column('Parameter') %>%
mutate(Exp.Estmate = exp(summary(fit_abeta_ind)$coefficients[,1])) %>%
mutate(p.value = 2*pnorm(abs(summary(fit_abeta_ind)$coefficients[,5]), lower.tail = F)) %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", format(round(p.value,4), nsmall=4))) %>%
knitr::kable(caption = "Table for Parameters in the Gamma Regression Model (Independence)", align = "lcccccc", format = "simple")
table_2
View(abeta)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(gee)
library(geepack)
library(tibble)
write.csv(abeta, "abeta_analysis.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(gee)
library(geepack)
library(tibble)
# load datasets
setwd("~/Documents/Capstone Second Year/")
ab1_42_tTau <- read.csv("data/Akesogen CSF Sample Run AB1-42_tTau-cm.csv", stringsAsFactors = FALSE, header = TRUE)
sequence <- read.csv("data/treatment_arm.csv",stringsAsFactors = FALSE, header = TRUE)
#Total Tau
tTau <- ab1_42_tTau %>%
mutate(id = as.numeric(paste0(substr(ATX.ID,7,7),substr(ATX.ID,9,11)))) %>%
left_join(sequence, by = c("id"="SCRNO"),all = TRUE) %>%
mutate(sequence = ifelse(substr(arm,1,6)=="Active",1,0),
period = ifelse(visit == "Screen B", 0, ifelse(visit == "V14", 1,2))) %>%
dplyr::select(id, visit, period, arm, sequence, tTau)
tTau$tTau <-  as.numeric(tTau$tTau)
tTau <- tTau[order(tTau$id, tTau$visit),]
names(tTau)
# create variables we need
tTau_ana <- tTau %>%
group_by(id) %>%
mutate(tTau0 = tTau[1],
tTau_fold = ifelse(period == 1, (tTau[2]/tTau[1]),
ifelse(period == 2, (tTau[3]/tTau[2]),NA)),
post_baseline = ifelse(period == 1, paste0(tTau[2],"/",tTau[1]),
ifelse(period == 2, paste0(tTau[3], "/", tTau[2]),NA)),
active_tx = ifelse(sequence == 0 & period == 1, 0,
ifelse(sequence == 0 & period == 2, 1,
ifelse(sequence == 1 & period == 1, 1,
ifelse(sequence == 1 & period == 2, 0, NA))))) %>%
select(id, period, sequence, tTau0, tTau_fold, post_baseline, active_tx) %>%
slice(-1)
#write.csv(abeta, "abeta_analysis.csv")
tTau_ana_fmt <- tTau_ana  %>% mutate(period = factor(period, levels = c(1,2), labels = c(":1st", ":2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c(":Placebo first", ":Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c(":Placebo", ":Active")))
View(tTau_ana_fmt)
write.csv(tTau_ana, "tTau_analysis.csv")
test <- lm(tTau_fold ~ period + sequence + active_tx + tTau0, data = tTau_ana_fmt)
summary(test)
cor(matrix(test$residuals, ncol=2, byrow = T))
# 1) Working correlation: Unstructured
fit_tTau_uns <- gee(tTau_fold ~ period + sequence + active_tx + tTau0, id = id, corstr = "unstructured", data = tTau_ana_fmt, family = "Gamma")
summary(fit_tTau_uns)
# 1) Working correlation: Unstructured
fit_tTau_uns <- gee(tTau_fold ~ period + sequence + active_tx + tTau0, id = id, corstr = "exchangeable", data = tTau_ana_fmt, family = "Gamma")
summary(fit_tTau_uns)
View(tTau_ana)
# load datasets
setwd("~/Documents/Capstone Second Year/")
ab1_42_tTau <- read.csv("data/Akesogen CSF Sample Run AB1-42_tTau-cm.csv", stringsAsFactors = FALSE, header = TRUE)
sequence <- read.csv("data/treatment_arm.csv",stringsAsFactors = FALSE, header = TRUE)
#Total Tau
tTau <- ab1_42_tTau %>%
mutate(id = as.numeric(paste0(substr(ATX.ID,7,7),substr(ATX.ID,9,11)))) %>%
left_join(sequence, by = c("id"="SCRNO"),all = TRUE) %>%
add_row(id = 1031, visit = "V26", arm = "Active/Placebo") %>%
mutate(sequence = ifelse(substr(arm,1,6)=="Active",1,0),
period = ifelse(visit == "Screen B", 0, ifelse(visit == "V14", 1,2))) %>%
dplyr::select(id, visit, period, arm, sequence, tTau)
tTau$tTau <-  as.numeric(tTau$tTau)
tTau <- tTau[order(tTau$id, tTau$visit),]
# create variables we need
tTau_ana <- tTau %>%
group_by(id) %>%
mutate(tTau0 = tTau[1],
tTau_fold = ifelse(period == 1, (tTau[2]/tTau[1]),
ifelse(period == 2, (tTau[3]/tTau[2]),NA)),
post_baseline = ifelse(period == 1, paste0(tTau[2],"/",tTau[1]),
ifelse(period == 2, paste0(tTau[3], "/", tTau[2]),NA)),
active_tx = ifelse(sequence == 0 & period == 1, 0,
ifelse(sequence == 0 & period == 2, 1,
ifelse(sequence == 1 & period == 1, 1,
ifelse(sequence == 1 & period == 2, 0, NA))))) %>%
select(id, period, sequence, tTau0, tTau_fold, post_baseline, active_tx) %>%
slice(-1)
write.csv(tTau_ana, "tTau_analysis.csv")
tTau_ana_fmt <- tTau_ana  %>% mutate(period = factor(period, levels = c(1,2), labels = c(":1st", ":2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c(":Placebo first", ":Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c(":Placebo", ":Active")))
knitr::opts_chunk$set(echo = TRUE)
# load datasets
setwd("~/Documents/Capstone Second Year/")
pTau181 <- read.csv("data/CSF Lumipulse p-tau data  06.27.2019.csv",stringsAsFactors = FALSE, header = TRUE)
sequence <- read.csv("data/treatment_arm.csv",stringsAsFactors = FALSE, header = TRUE)
#pTau181
pTau <- pTau181 %>%
mutate(id = as.numeric(paste0(substr(ATX.ID,7,7),substr(ATX.ID,9,11)))) %>%
left_join(sequence, by = c("id"="SCRNO"),all = TRUE) %>%
add_row(id = 1031, Visit = "V26", arm = "Active/Placebo") %>%
mutate(sequence = ifelse(substr(arm,1,6)=="Active",1,0),
period = ifelse(Visit == "Screen B", 0, ifelse(Visit == "V14", 1,2))) %>%
dplyr::select(id, Visit, period, arm, sequence, pTau)
pTau$pTau <-  as.numeric(pTau$pTau)
pTau <- pTau[order(pTau$id, pTau$Visit),]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(gee)
library(geepack)
library(tibble)
# load datasets
setwd("~/Documents/Capstone Second Year/")
pTau181 <- read.csv("data/CSF Lumipulse p-tau data  06.27.2019.csv",stringsAsFactors = FALSE, header = TRUE)
sequence <- read.csv("data/treatment_arm.csv",stringsAsFactors = FALSE, header = TRUE)
#pTau181
pTau <- pTau181 %>%
mutate(id = as.numeric(paste0(substr(ATX.ID,7,7),substr(ATX.ID,9,11)))) %>%
left_join(sequence, by = c("id"="SCRNO"),all = TRUE) %>%
add_row(id = 1031, Visit = "V26", arm = "Active/Placebo") %>%
mutate(sequence = ifelse(substr(arm,1,6)=="Active",1,0),
period = ifelse(Visit == "Screen B", 0, ifelse(Visit == "V14", 1,2))) %>%
dplyr::select(id, Visit, period, arm, sequence, pTau)
pTau$pTau <-  as.numeric(pTau$pTau)
pTau <- pTau[order(pTau$id, pTau$Visit),]
knitr::opts_chunk$set(echo = TRUE)
# create variables we need
pTau_ana <- pTau %>%
group_by(id) %>%
mutate(pTau0 = pTau[1],
pTau_fold = ifelse(period == 1, (pTau[2]/pTau[1]),
ifelse(period == 2, (pTau[3]/pTau[2]),NA)),
post_baseline = ifelse(period == 1, paste0(pTau[2],"/",pTau[1]),
ifelse(period == 2, paste0(pTau[3], "/", pTau[2]),NA)),
active_tx = ifelse(sequence == 0 & period == 1, 0,
ifelse(sequence == 0 & period == 2, 1,
ifelse(sequence == 1 & period == 1, 1,
ifelse(sequence == 1 & period == 2, 0, NA))))) %>%
select(id, period, sequence, pTau0, pTau_fold, post_baseline, active_tx) %>%
slice(-1)
write.csv(pTau_ana, "pTau_analysis.csv")
pTau_ana_fmt <- pTau_ana  %>% mutate(period = factor(period, levels = c(1,2), labels = c(":1st", ":2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c(":Placebo first", ":Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c(":Placebo", ":Active")))
knitr::opts_chunk$set(echo = TRUE)
test <- lm(pTau ~ period + sequence + active_tx + pTau0, data = pTau_ana_fmt)
# create variables we need
pTau_ana <- pTau %>%
group_by(id) %>%
mutate(pTau0 = pTau[1],
pTau_fold = ifelse(period == 1, (pTau[2]/pTau[1]),
ifelse(period == 2, (pTau[3]/pTau[2]),NA)),
post_baseline = ifelse(period == 1, paste0(pTau[2],"/",pTau[1]),
ifelse(period == 2, paste0(pTau[3], "/", pTau[2]),NA)),
active_tx = ifelse(sequence == 0 & period == 1, 0,
ifelse(sequence == 0 & period == 2, 1,
ifelse(sequence == 1 & period == 1, 1,
ifelse(sequence == 1 & period == 2, 0, NA))))) %>%
select(id, period, sequence, pTau0, pTau_fold, post_baseline, active_tx) %>%
slice(-1)
write.csv(pTau_ana, "pTau_analysis.csv")
pTau_ana_fmt <- pTau_ana  %>% mutate(period = factor(period, levels = c(1,2), labels = c(":1st", ":2nd")),
sequence = factor(sequence, levels = c(0,1), labels = c(":Placebo first", ":Active first")),
active_tx = factor(active_tx, levels = c(0,1), labels = c(":Placebo", ":Active")))
knitr::opts_chunk$set(echo = TRUE)
test <- lm(pTau ~ period + sequence + active_tx + pTau0, data = pTau_ana_fmt)
knitr::opts_chunk$set(echo = TRUE)
test <- lm(pTau_fold ~ period + sequence + active_tx + pTau0, data = pTau_ana_fmt)
summary(test)
cor(matrix(test$residuals, ncol=2, byrow = T))
knitr::opts_chunk$set(echo = TRUE)
# 1) Working correlation: Exchangeable
fit_pTau_uns <- gee(pTau_fold ~ period + sequence + active_tx + pTau0, id = id, corstr = "exchangeable", data = pTau_ana_fmt, family = "Gamma")
summary(fit_pTau_uns)
# 2) Working correlation: Independence
fit_pTau_ind<- gee(pTau_fold ~ period + sequence + active_tx + pTau0, id = id, corstr = "independence", data = pTau_ana_fmt, family = "Gamma")
summary(fit_pTau_ind)
knitr::opts_chunk$set(echo = TRUE)
# 1) Working correlation: Exchangeable
fit_pTau_uns <- gee(pTau_fold ~ period + sequence + active_tx + pTau0, id = id, corstr = "unstructured", data = pTau_ana_fmt, family = "Gamma")
summary(fit_pTau_uns)
View(pTau_ana)
knitr::opts_chunk$set(echo = TRUE)
p2 <- pTau_ana_fmt[c(-47,-48),]
knitr::opts_chunk$set(echo = TRUE)
```{r, include=FALSE}
p2 <- pTau_ana_fmt[c(-47,-48),]
# model regression: gee function with gamma family
# 1) Working correlation: Unstructured
fit_pTau_uns2 <- gee(pTau_fold ~ period + sequence + active_tx + pTau0, id = id, corstr = "unstructured", data = p2, family = "Gamma")
# 2) Working correlation: Independence
fit_pTau_ind2 <- gee(pTau_fold ~ period + sequence + active_tx + pTau0, id = id, corstr = "independence", data = p2, family = "Gamma")
setwd("~/Documents/INFO_550/final_project_diamond_prize_mac2")
